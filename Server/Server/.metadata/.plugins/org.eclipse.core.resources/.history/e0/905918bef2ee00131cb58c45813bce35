import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.Vector;

public class Server
{

	private ServerSocket  server;
    Vector V = new Vector(); //  소켓을  관리하는  벡터


    void  startServer()
    {
        try
        {
            server = new ServerSocket(13080);
            System.out.println("서버소켓이 생성되었습니다.");

            while(true)
            {
            	int i = 0;
                Socket socket=server.accept();
                System.out.println("클라이언트와 연결되었습니다.");

                new Puzzle_Thread(socket).start(); // 클라이언트와 통신하는 스레드를 생성하고 실행시킨다
                if (socket != null)
                	V.add(i++, socket); // 소켓 관리자 리스트에 소켓을 추가한다.
                InetAddress inetaddr = socket.getInetAddress(); // 접속자의 IP를 알아낸다
                System.out.println(inetaddr.getHostAddress() + "소환사님이 접속하셧습니다."); // IP찍어쥬공
                System.out.println("현재 접속자 수: " + V.size()); // 현재 접속하고 있는 클라이언트의 수를 화면에 출력한다.
            }
        }
        
        catch(Exception  e)
        {
            System.out.println(e);
        }
    }

    public static void main(String[] args)
    {
        UserInfo_DB db = new UserInfo_DB();
        Server server = new Server();
        server.startServer(); // 서버를 실행한다.
        db.close();
    }
    
    class Puzzle_Thread extends Thread // 클라이언트와 통신하는 스레드 클래스
    {
        Socket socket; // 소켓의 레퍼런스
        private BufferedReader reader;
        private PrintWriter writer;
        
        Puzzle_Thread(Socket socket) // 생성자
        {          
            this.socket=socket;
        }

        public void run()
        {
            try
            {
                UserInfo_DB db = new UserInfo_DB();
                OutputStream out = socket.getOutputStream();
                InputStream in = socket.getInputStream();
                
                reader = new BufferedReader(new InputStreamReader(in, "utf-8"));
                writer = new PrintWriter(new OutputStreamWriter(out, "utf-8"));
                String  msg = null;
                
                while(true)// 클라이언트로부터 받은 메시지에 따라 동작할 구간
                {
	                msg = reader.readLine();
	                if(!msg.toString().equals(""))
	                {
		                StringTokenizer tok = new StringTokenizer(msg, "\t");
		                System.out.println(msg);
		                
		                int header = 0; // 일련번호
		                String result = null; // 리턴값
		                String Name = null; // 이름
		                String Pw = null; // 비밀번호
		                String parameter[] = new String[5];
		                int i = 0; //우선 가장앞에 있는 헤더를 따로 int형으로 저장
		                header = Integer.parseInt(tok.nextToken()); // 앞으 헤더부분을 int형으로 변환
		                
		                while(tok.hasMoreTokens())//클라이언트로부터 받은 메시지를 토큰에 따라 나눈다.
		                {
		                	parameter[i++] = tok.nextToken();
		                }
		                
		            	switch(header) // 맨처음 헤더부분을 Switch로
		            	{
		            		case 0 : // 헤더가 0일때 로그인 시도
		             			result = db.login(parameter[0], parameter[1]); // return 값 0 or -1
		             			writer.println(result); // 클라에 결과값 쏴주고
		            			writer.flush(); // 버퍼 비워주고
		            			break;
		            			
		            		case 1 : // 헤더가 1일때 id 중복체크
		            			result = db.overlap(parameter[0]); // return값 1 or -1
		            			writer.println(result); // 클라에 결과값 쏴주고
		            			writer.flush(); // 버퍼비워주고
		            			break;
		  	            			
		            		case 2 : // 헤더가 2일때 회원가입 시도
		            			db.insert(parameter[0], parameter[1]); // 이름, 패스워드를 DB에 저장
		            			writer.println("quit"); // 클라에 quit값 쏴주고
		            			writer.flush(); // 버퍼비워주고
		            			break; // 종료
		            			
		        			default :
		        				System.out.println("bye");
		        				break;
		            	}
		            	msg = "";
	                }
                }
            }
            
            catch(Exception  e)
            {
            }
            
            finally // 클라이언트와 접속이 끊겼을때
            {
                try
                {
                    V.remove(socket); // 소켓 관리자 리스트에서 소켓을 제거한다.
                    
                    if(reader!=null)  
                    	reader.close();

                    if(writer!=null)  
                    	writer.close();

                    if(socket!=null)  
                    	socket.close();

                    reader=null;  
                    writer=null;  
                    socket=null;
                    // 소켓과 IO Stream을 close
                    

                    System.out.println("소환사님이 탈주닌자라뉘!");
                    System.out.println("현재 클라이언트 수: "+ V.size());
                }
                
                catch(Exception  e)
                {
                }
            }
        }
    }
}